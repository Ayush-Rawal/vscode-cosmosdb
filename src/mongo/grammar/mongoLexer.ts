// Generated from ./grammar/mongo.g4 by ANTLR 4.6-SNAPSHOT


/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/*tslint:disable */


import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { CharStream } from 'antlr4ts/CharStream';
import { NotNull, Override } from 'antlr4ts/Decorators';
import { Lexer } from 'antlr4ts/Lexer';
import * as Utils from 'antlr4ts/misc/Utils';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';



export class mongoLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly SingleLineComment = 9;
	public static readonly MultiLineComment = 10;
	public static readonly StringLiteral = 11;
	public static readonly NullLiteral = 12;
	public static readonly BooleanLiteral = 13;
	public static readonly NumericLiteral = 14;
	public static readonly RegexLiteral = 15;
	public static readonly RegexFlag = 16;
	public static readonly DecimalLiteral = 17;
	public static readonly LineTerminator = 18;
	public static readonly SEMICOLON = 19;
	public static readonly DOT = 20;
	public static readonly DB = 21;
	public static readonly IDENTIFIER = 22;
	public static readonly DOUBLE_QUOTED_STRING_LITERAL = 23;
	public static readonly SINGLE_QUOTED_STRING_LITERAL = 24;
	public static readonly WHITESPACE = 25;
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE"
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "SingleLineComment",
		"MultiLineComment", "StringLiteral", "NullLiteral", "BooleanLiteral",
		"NumericLiteral", "RegexLiteral", "RegexFlag", "DecimalLiteral", "LineTerminator",
		"SEMICOLON", "DOT", "DB", "IDENTIFIER", "DOUBLE_QUOTED_STRING_LITERAL",
		"SINGLE_QUOTED_STRING_LITERAL", "STRING_ESCAPE", "DecimalIntegerLiteral",
		"ExponentPart", "DecimalDigit", "WHITESPACE"
	];

	private static readonly _LITERAL_NAMES: (string | undefined)[] = [
		undefined, "'('", "','", "')'", "'{'", "'}'", "'['", "']'", "':'", undefined,
		undefined, undefined, "'null'", undefined, undefined, undefined, undefined,
		undefined, undefined, "';'", "'.'", "'db'"
	];
	private static readonly _SYMBOLIC_NAMES: (string | undefined)[] = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined,
		undefined, undefined, "SingleLineComment", "MultiLineComment", "StringLiteral",
		"NullLiteral", "BooleanLiteral", "NumericLiteral", "RegexLiteral", "RegexFlag",
		"DecimalLiteral", "LineTerminator", "SEMICOLON", "DOT", "DB", "IDENTIFIER",
		"DOUBLE_QUOTED_STRING_LITERAL", "SINGLE_QUOTED_STRING_LITERAL", "WHITESPACE"
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(mongoLexer._LITERAL_NAMES, mongoLexer._SYMBOLIC_NAMES, []);

	@Override
	@NotNull
	public get vocabulary(): Vocabulary {
		return mongoLexer.VOCABULARY;
	}


	private isExternalIdentifierText(text) {
		return text === 'db';
	}


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(mongoLexer._ATN, this);
	}

	@Override
	public get grammarFileName(): string { return "mongo.g4"; }

	@Override
	public get ruleNames(): string[] { return mongoLexer.ruleNames; }

	@Override
	public get serializedATN(): string { return mongoLexer._serializedATN; }

	@Override
	public get modeNames(): string[] { return mongoLexer.modeNames; }

	@Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
			case 21:
				return this.IDENTIFIER_sempred(_localctx, predIndex);
		}
		return true;
	}
	private IDENTIFIER_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
			case 0:
				return !this.isExternalIdentifierText(this.text)
					;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x1B\xEA\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04" +
		"\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03" +
		"\t\x03\t\x03\n\x03\n\x03\n\x03\n\x07\nR\n\n\f\n\x0E\nU\v\n\x03\n\x03\n" +
		"\x03\v\x03\v\x03\v\x03\v\x07\v]\n\v\f\v\x0E\v`\v\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\f\x03\f\x05\fi\n\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E" +
		"y\n\x0E\x03\x0F\x05\x0F|\n\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x06\x10" +
		"\x82\n\x10\r\x10\x0E\x10\x83\x03\x10\x03\x10\x07\x10\x88\n\x10\f\x10\x0E" +
		"\x10\x8B\v\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x06\x12\x92\n\x12" +
		"\r\x12\x0E\x12\x93\x03\x12\x05\x12\x97\n\x12\x03\x12\x03\x12\x06\x12\x9B" +
		"\n\x12\r\x12\x0E\x12\x9C\x03\x12\x05\x12\xA0\n\x12\x03\x12\x03\x12\x05" +
		"\x12\xA4\n\x12\x05\x12\xA6\n\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14" +
		"\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x06\x17" +
		"\xB5\n\x17\r\x17\x0E\x17\xB6\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x07" +
		"\x18\xBE\n\x18\f\x18\x0E\x18\xC1\v\x18\x03\x18\x03\x18\x03\x19\x03\x19" +
		"\x03\x19\x07\x19\xC8\n\x19\f\x19\x0E\x19\xCB\v\x19\x03\x19\x03\x19\x03" +
		"\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x07\x1B\xD5\n\x1B\f\x1B\x0E" +
		"\x1B\xD8\v\x1B\x05\x1B\xDA\n\x1B\x03\x1C\x03\x1C\x05\x1C\xDE\n\x1C\x03" +
		"\x1C\x06\x1C\xE1\n\x1C\r\x1C\x0E\x1C\xE2\x03\x1D\x03\x1D\x03\x1E\x03\x1E" +
		"\x03\x1E\x03\x1E\x03^\x02\x02\x1F\x03\x02\x03\x05\x02\x04\x07\x02\x05" +
		"\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17" +
		"\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13" +
		"%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02" +
		"\x025\x02\x027\x02\x029\x02\x02;\x02\x1B\x03\x02\x0E\x05\x02\f\f\x0F\x0F" +
		"\u202A\u202B\x03\x0211\x07\x02iikkooww{{\f\x02\v\f\x0F\x0F\"\"$$)+.0<" +
		"=]_}}\x7F\x7F\x04\x02$$^^\x04\x02))^^\x05\x02$$))^^\x03\x023;\x04\x02" +
		"GGgg\x04\x02--//\x03\x022;\x04\x02\v\v\"\"\xFD\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02" +
		"\x02\x021\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x03=\x03\x02\x02\x02\x05" +
		"?\x03\x02\x02\x02\x07A\x03\x02\x02\x02\tC\x03\x02\x02\x02\vE\x03\x02\x02" +
		"\x02\rG\x03\x02\x02\x02\x0FI\x03\x02\x02\x02\x11K\x03\x02\x02\x02\x13" +
		"M\x03\x02\x02\x02\x15X\x03\x02\x02\x02\x17h\x03\x02\x02\x02\x19j\x03\x02" +
		"\x02\x02\x1Bx\x03\x02\x02\x02\x1D{\x03\x02\x02\x02\x1F\x7F\x03\x02\x02" +
		"\x02!\x8C\x03\x02\x02\x02#\xA5\x03\x02\x02\x02%\xA7\x03\x02\x02\x02\'" +
		"\xAB\x03\x02\x02\x02)\xAD\x03\x02\x02\x02+\xAF\x03\x02\x02\x02-\xB4\x03" +
		"\x02\x02\x02/\xBA\x03\x02\x02\x021\xC4\x03\x02\x02\x023\xCE\x03\x02\x02" +
		"\x025\xD9\x03\x02\x02\x027\xDB\x03\x02\x02\x029\xE4\x03\x02\x02\x02;\xE6" +
		"\x03\x02\x02\x02=>\x07*\x02\x02>\x04\x03\x02\x02\x02?@\x07.\x02\x02@\x06" +
		"\x03\x02\x02\x02AB\x07+\x02\x02B\b\x03\x02\x02\x02CD\x07}\x02\x02D\n\x03" +
		"\x02\x02\x02EF\x07\x7F\x02\x02F\f\x03\x02\x02\x02GH\x07]\x02\x02H\x0E" +
		"\x03\x02\x02\x02IJ\x07_\x02\x02J\x10\x03\x02\x02\x02KL\x07<\x02\x02L\x12" +
		"\x03\x02\x02\x02MN\x071\x02\x02NO\x071\x02\x02OS\x03\x02\x02\x02PR\n\x02" +
		"\x02\x02QP\x03\x02\x02\x02RU\x03\x02\x02\x02SQ\x03\x02\x02\x02ST\x03\x02" +
		"\x02\x02TV\x03\x02\x02\x02US\x03\x02\x02\x02VW\b\n\x02\x02W\x14\x03\x02" +
		"\x02\x02XY\x071\x02\x02YZ\x07,\x02\x02Z^\x03\x02\x02\x02[]\v\x02\x02\x02" +
		"\\[\x03\x02\x02\x02]`\x03\x02\x02\x02^_\x03\x02\x02\x02^\\\x03\x02\x02" +
		"\x02_a\x03\x02\x02\x02`^\x03\x02\x02\x02ab\x07,\x02\x02bc\x071\x02\x02" +
		"cd\x03\x02\x02\x02de\b\v\x02\x02e\x16\x03\x02\x02\x02fi\x051\x19\x02g" +
		"i\x05/\x18\x02hf\x03\x02\x02\x02hg\x03\x02\x02\x02i\x18\x03\x02\x02\x02" +
		"jk\x07p\x02\x02kl\x07w\x02\x02lm\x07n\x02\x02mn\x07n\x02\x02n\x1A\x03" +
		"\x02\x02\x02op\x07v\x02\x02pq\x07t\x02\x02qr\x07w\x02\x02ry\x07g\x02\x02" +
		"st\x07h\x02\x02tu\x07c\x02\x02uv\x07n\x02\x02vw\x07u\x02\x02wy\x07g\x02" +
		"\x02xo\x03\x02\x02\x02xs\x03\x02\x02\x02y\x1C\x03\x02\x02\x02z|\x07/\x02" +
		"\x02{z\x03\x02\x02\x02{|\x03\x02\x02\x02|}\x03\x02\x02\x02}~\x05#\x12" +
		"\x02~\x1E\x03\x02\x02\x02\x7F\x81\x071\x02\x02\x80\x82\n\x03\x02\x02\x81" +
		"\x80\x03\x02\x02\x02\x82\x83\x03\x02\x02\x02\x83\x81\x03\x02\x02\x02\x83" +
		"\x84\x03\x02\x02\x02\x84\x85\x03\x02\x02\x02\x85\x89\x071\x02\x02\x86" +
		"\x88\x05!\x11\x02\x87\x86\x03\x02\x02\x02\x88\x8B\x03\x02\x02\x02\x89" +
		"\x87\x03\x02\x02\x02\x89\x8A\x03\x02\x02\x02\x8A \x03\x02\x02\x02\x8B" +
		"\x89\x03\x02\x02\x02\x8C\x8D\t\x04\x02\x02\x8D\"\x03\x02\x02\x02\x8E\x8F" +
		"\x055\x1B\x02\x8F\x91\x070\x02\x02\x90\x92\x059\x1D\x02\x91\x90\x03\x02" +
		"\x02\x02\x92\x93\x03\x02\x02\x02\x93\x91\x03\x02\x02\x02\x93\x94\x03\x02" +
		"\x02\x02\x94\x96\x03\x02\x02\x02\x95\x97\x057\x1C\x02\x96\x95\x03\x02" +
		"\x02\x02\x96\x97\x03\x02\x02\x02\x97\xA6\x03\x02\x02\x02\x98\x9A\x070" +
		"\x02\x02\x99\x9B\x059\x1D\x02\x9A\x99\x03\x02\x02\x02\x9B\x9C\x03\x02" +
		"\x02\x02\x9C\x9A\x03\x02\x02\x02\x9C\x9D\x03\x02\x02\x02\x9D\x9F\x03\x02" +
		"\x02\x02\x9E\xA0\x057\x1C\x02\x9F\x9E\x03\x02\x02\x02\x9F\xA0\x03\x02" +
		"\x02\x02\xA0\xA6\x03\x02\x02\x02\xA1\xA3\x055\x1B\x02\xA2\xA4\x057\x1C" +
		"\x02\xA3\xA2\x03\x02\x02\x02\xA3\xA4\x03\x02\x02\x02\xA4\xA6\x03\x02\x02" +
		"\x02\xA5\x8E\x03\x02\x02\x02\xA5\x98\x03\x02\x02\x02\xA5\xA1\x03\x02\x02" +
		"\x02\xA6$\x03\x02\x02\x02\xA7\xA8\t\x02\x02\x02\xA8\xA9\x03\x02\x02\x02" +
		"\xA9\xAA\b\x13\x02\x02\xAA&\x03\x02\x02\x02\xAB\xAC\x07=\x02\x02\xAC(" +
		"\x03\x02\x02\x02\xAD\xAE\x070\x02\x02\xAE*\x03\x02\x02\x02\xAF\xB0\x07" +
		"f\x02\x02\xB0\xB1\x07d\x02\x02\xB1,\x03\x02\x02\x02\xB2\xB5\n\x05\x02" +
		"\x02\xB3\xB5\x053\x1A\x02\xB4\xB2\x03\x02\x02\x02\xB4\xB3\x03\x02\x02" +
		"\x02\xB5\xB6\x03\x02\x02\x02\xB6\xB4\x03\x02\x02\x02\xB6\xB7\x03\x02\x02" +
		"\x02\xB7\xB8\x03\x02\x02\x02\xB8\xB9\x06\x17\x02\x02\xB9.\x03\x02\x02" +
		"\x02\xBA\xBF\x07$\x02\x02\xBB\xBE\n\x06\x02\x02\xBC\xBE\x053\x1A\x02\xBD" +
		"\xBB\x03\x02\x02\x02\xBD\xBC\x03\x02\x02\x02\xBE\xC1\x03\x02\x02\x02\xBF" +
		"\xBD\x03\x02\x02\x02\xBF\xC0\x03\x02\x02\x02\xC0\xC2\x03\x02\x02\x02\xC1" +
		"\xBF\x03\x02\x02\x02\xC2\xC3\x07$\x02\x02\xC30\x03\x02\x02\x02\xC4\xC9" +
		"\x07)\x02\x02\xC5\xC8\n\x07\x02\x02\xC6\xC8\x053\x1A\x02\xC7\xC5\x03\x02" +
		"\x02\x02\xC7\xC6\x03\x02\x02\x02\xC8\xCB\x03\x02\x02\x02\xC9\xC7\x03\x02" +
		"\x02\x02\xC9\xCA\x03\x02\x02\x02\xCA\xCC\x03\x02\x02\x02\xCB\xC9\x03\x02" +
		"\x02\x02\xCC\xCD\x07)\x02\x02\xCD2\x03\x02\x02\x02\xCE\xCF\x07^\x02\x02" +
		"\xCF\xD0\t\b\x02\x02\xD04\x03\x02\x02\x02\xD1\xDA\x072\x02\x02\xD2\xD6" +
		"\t\t\x02\x02\xD3\xD5\x059\x1D\x02\xD4\xD3\x03\x02\x02\x02\xD5\xD8\x03" +
		"\x02\x02\x02\xD6\xD4\x03\x02\x02\x02\xD6\xD7\x03\x02\x02\x02\xD7\xDA\x03" +
		"\x02\x02\x02\xD8\xD6\x03\x02\x02\x02\xD9\xD1\x03\x02\x02\x02\xD9\xD2\x03" +
		"\x02\x02\x02\xDA6\x03\x02\x02\x02\xDB\xDD\t\n\x02\x02\xDC\xDE\t\v\x02" +
		"\x02\xDD\xDC\x03\x02\x02\x02\xDD\xDE\x03\x02\x02\x02\xDE\xE0\x03\x02\x02" +
		"\x02\xDF\xE1\x059\x1D\x02\xE0\xDF\x03\x02\x02\x02\xE1\xE2\x03\x02\x02" +
		"\x02\xE2\xE0\x03\x02\x02\x02\xE2\xE3\x03\x02\x02\x02\xE38\x03\x02\x02" +
		"\x02\xE4\xE5\t\f\x02\x02\xE5:\x03\x02\x02\x02\xE6\xE7\t\r\x02\x02\xE7" +
		"\xE8\x03\x02\x02\x02\xE8\xE9\b\x1E\x03\x02\xE9<\x03\x02\x02\x02\x1A\x02" +
		"S^hx{\x83\x89\x93\x96\x9C\x9F\xA3\xA5\xB4\xB6\xBD\xBF\xC7\xC9\xD6\xD9" +
		"\xDD\xE2\x04\x02\x03\x02\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!mongoLexer.__ATN) {
			mongoLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(mongoLexer._serializedATN));
		}

		return mongoLexer.__ATN;
	}

}

